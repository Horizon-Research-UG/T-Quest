import tkinter as tk  # GUI Framework (verwendet Zeile 23, 45)
from tkinter import ttk  # moderne Widgets (verwendet Zeile 16, 28)
import subprocess  # Prozess-Start (verwendet Zeile 52)
import sys  # System-Zugriff (verwendet Zeile 53)
import os  # Pfad-Operations (verwendet Zeile 54)

def create_title(window):  # Plugin-Titel (verwendet Zeile 32)
    label = tk.Label(window, text="üîå PLUGINS")  # Titel-Text (Design-Element)
    label.configure(bg="#000000", fg="#00FFFF")  # schwarz/cyan (TimeQuest-Design)
    label.configure(font=("Arial", 20, "bold"))  # gro√üe Schrift (Sichtbarkeit)
    label.place(relx=0.5, rely=0.2, anchor="center")  # oben mittig (Layout)
    return label  # Label-Objekt (f√ºr Referenz)

def create_level_grid(window, back_func):  # Level-Buttons (verwendet Zeile 37)
    levels = get_level_data()  # Level-Daten (Zeile 22)
    for i, (text, cmd) in enumerate(levels):  # alle Levels (Iteration)
        row, col = i // 2, i % 2  # Grid-Position (2x2 Layout)
        x, y = 0.3 + col * 0.4, 0.45 + row * 0.15  # Koordinaten (Layout-Berechnung)
        add_level_button(window, text, cmd, x, y)  # Button erstellen (Zeile 27)

def get_level_data():  # Level-Definitionen (verwendet Zeile 14)
    return [  # Level-Liste (Datenstruktur)
        ("üìä Level 2", lambda: load_level2()),  # Advanced-Level (Zeile 42)
        ("üéÆ Geraden-Spiel", lambda: start_game()),  # Mathe-Spiel (Zeile 47)
        ("üöÄ Level 3", lambda: print("Level 3 kommt")),  # Placeholder (Future)
        ("‚ö° Quick-Start", lambda: print("Quick activated"))  # Schnell-Option (Direct)
    ]  # Daten-Array (f√ºr Grid-System)

def add_level_button(window, text, cmd, x, y):  # Button erstellen (verwendet Zeile 16)
    btn = ttk.Button(window, text=text)  # Button-Widget (GUI-Element)
    btn.configure(command=cmd)  # Kommando setzen (Funktionalit√§t)
    btn.place(relx=x, rely=y, anchor="center")  # Position setzen (Layout)
    return btn  # Button-Objekt (f√ºr Referenz)

def add_nav_buttons(window, back_func):  # Navigation (verwendet Zeile 56)
    back_btn = ttk.Button(window, text="‚Üê Zur√ºck")  # Zur√ºck-Button (Navigation)
    back_btn.configure(command=back_func)  # Kommando setzen (Callback)
    back_btn.place(relx=0.05, rely=0.05, anchor="nw")  # links oben (Standard-Position)
    return back_btn  # Button-Objekt (f√ºr Referenz)

def add_breadcrumb(window):  # Pfad-Anzeige (verwendet Zeile 61)
    try:  # Fehler-Behandlung (Robustheit)
        import wake_up_v2  # Navigation-System (Integration)
        path = " ‚Üí ".join([item[0] for item in wake_up_v2.nav_stack])  # Pfad-String (Verlauf)
        label = tk.Label(window, text=f"üîç {path}")  # Breadcrumb-Text (Orientierung)
        label.configure(bg="#000000", fg="#888888", font=("Arial", 10))  # Style (Design)
        label.place(relx=0.5, rely=0.95, anchor="center")  # unten mittig (Footer)
    except:  # Import-Fehler (Fallback)
        pass  # keine Aktion (Silent-Fail)

def load_level2():  # Level 2 laden (verwendet Zeile 18)
    try:  # Fehler-Behandlung (Robustheit)
        import level2_advanced_v2  # Level-System (Modul-Import)
        print("Level 2 Advanced wird geladen...")  # Status-Info (Terminal)
    except ImportError:  # Modul-Fehler (Fallback)
        print("Level 2 noch nicht verf√ºgbar")  # Fehler-Info (User-Feedback)

def start_game():  # Spiel starten (verwendet Zeile 18)
    try:  # Fehler-Behandlung (Robustheit)
        game_path = "geraden_spiel/untermain.py"  # Spiel-Pfad (Relative Path)
        subprocess.Popen([sys.executable, game_path])  # Prozess starten (External)
        print("üéÆ Geraden-Spiel gestartet...")  # Status-Info (Terminal)
    except Exception as e:  # Allgemeine Fehler (Catch-All)
        print(f"Spiel-Start Fehler: {e}")  # Fehler-Output (Debug)

def load_into_window(window, back_func):  # Haupt-Funktion (Entry Point)
    create_title(window)  # Titel hinzuf√ºgen (Zeile 8)
    create_level_grid(window, back_func)  # Level-Grid (Zeile 13)
    add_nav_buttons(window, back_func)  # Navigation (Zeile 32)
    add_breadcrumb(window)  # Pfad-Anzeige (Zeile 37)

def main():  # Direktstart (Test-Funktion)
    root = tk.Tk()  # Test-Fenster (Standalone)
    root.title("TimeQuest - Plugins")  # Titel (Konsistenz)
    root.geometry("800x600")  # Standard-Gr√∂√üe (Kompatibilit√§t)
    root.configure(bg="#000000")  # schwarz (Design-Standard)
    load_into_window(root, root.quit)  # Inhalt laden (Test-Modus)
    root.mainloop()  # Event-Loop (GUI-System)

if __name__ == "__main__":  # Direktstart-Check (Standard)
    main()  # Test-Programm (Standalone-Modus)