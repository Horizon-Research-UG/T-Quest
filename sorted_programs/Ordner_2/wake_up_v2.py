import tkinter as tk  # GUI Framework (verwendet Zeile 23, 45, 67)
from tkinter import ttk  # moderne Widgets (verwendet Zeile 16, 28)
import load_plugins_v2 as load_plugins  # Plugin-System (verwendet Zeile 89, 95)
import help_system  # Hilfe-System (verwendet Zeile 60)

nav_stack = []  # globaler Verlauf (verwendet Zeile 34, 67, 89)

def create_window():  # Basis-Fenster (verwendet Zeile 125)
    root = tk.Tk()  # Hauptfenster (für GUI-System)
    root.title("TimeQuest")  # Projekt-Name (sichtbar Titel-Bar)
    root.geometry("800x600")  # Standard-Größe (Desktop-optimiert)
    root.configure(bg="#000000")  # schwarz (futuristisch wie Anforderung)
    root.resizable(True, True)  # skalierbar (USB-Stick Kompatibilität)
    return root  # Fenster-Objekt (für weitere Funktionen)

def add_quest_button(window):  # Quest-Button (verwendet Zeile 131)
    btn = ttk.Button(window, text="Quest")  # Haupt-Button (wie Anforderung)
    btn.configure(command=lambda: start_quest(window))  # Quest-Start (Zeile 23)
    btn.place(relx=0.5, rely=0.5, anchor="center")  # Fenster-Mitte (Design-Anforderung)
    print("How mutch Time you wanna offer?")  # Terminal-Output (Anforderung)
    return btn  # Button-Objekt (für Referenz)

def start_quest(window):  # Quest-System (verwendet Zeile 18)
    clear_window(window)  # Fenster leeren (Zeile 30)
    add_nav("Plugins", lambda w: load_plugins_view(w))  # Navigation (Zeile 28, 34)
    load_plugins.load_into_window(window, lambda: go_back(window))  # Plugin-Laden (Zeile 3)
    window.title("TimeQuest - Plugins")  # Titel-Update (Design-Konsistenz)

def clear_window(window):  # Fenster-Reset (verwendet Zeile 25)
    for widget in window.winfo_children():  # alle Widgets (GUI-Bereinigung)
        widget.destroy()  # Widget entfernen (Speicher-Optimierung)

def add_nav(name, func):  # Navigation hinzufügen (verwendet Zeile 26, 48)
    if nav_stack and nav_stack[-1][0] == name:  # Duplikat-Check (Stack-Integrität)
        return  # bereits vorhanden (Performance-Optimierung)
    nav_stack.append((name, func))  # Stack erweitern (Verlaufs-System)

def go_back(window):  # Rückwärts-Navigation (verwendet Zeile 27)
    if len(nav_stack) <= 1:  # Basis-Check (Stack-Unterlauf-Schutz)
        return  # am Anfang (keine weitere Aktion)
    current = nav_stack.pop()  # aktuell entfernen (Stack-Operation)
    prev_name, prev_func = nav_stack[-1]  # vorherige holen (Verlaufs-Zugriff)
    prev_func(window)  # vorherige laden (Navigation-Ausführung)

def load_plugins_view(window):  # Plugin-Ansicht (verwendet Zeile 27)
    clear_window(window)  # Fenster leeren (Zeile 30)
    load_plugins.load_into_window(window, lambda: go_back(window))  # Plugin-System (Zeile 3)
    window.title("TimeQuest - Plugins")  # Titel (Konsistenz)

def setup_style():  # Design-System (verwendet Zeile 54)
    style = ttk.Style()  # Style-Objekt (GUI-Styling)
    style.theme_use("clam")  # minimalistisch (Design-Anforderung)
    style.configure("TButton", foreground="#00FFFF")  # cyan (futuristisch)
    style.configure("TButton", background="#111111")  # dunkel (Kontrast)
    style.configure("TButton", font=("Arial", 16, "bold"))  # lesbar (Usability)

def init_main_view(window):  # Haupt-Ansicht (verwendet Zeile 58)
    nav_stack.clear()  # Stack leeren (Initialisierung)
    nav_stack.append(("TimeQuest", lambda w: init_main_view(w)))  # Basis setzen (Verlaufs-Basis)
    clear_window(window)  # Fenster leeren (Zeile 30)
    add_quest_button(window)  # Quest-Button (Zeile 16)
    help_system.add_help_to_window(window)  # Hilfe-Button (immer sichtbar)
    window.title("TimeQuest")  # Titel (Projekt-Name)

def main():  # Hauptprogramm (verwendet beim Start)
    window = create_window()  # Fenster erstellen (Zeile 7)
    setup_style()  # Design anwenden (Zeile 47)
    init_main_view(window)  # Haupt-Ansicht (Zeile 52)
    window.mainloop()  # Event-Loop (GUI-System)

if __name__ == "__main__":  # Direktstart-Check (Python-Standard)
    main()  # Programm starten (Zeile 58)